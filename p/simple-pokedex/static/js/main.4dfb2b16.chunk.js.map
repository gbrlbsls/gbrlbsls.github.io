{"version":3,"sources":["services/api.ts","services/pokeapi.ts","utils.ts","components/Pokedex/Pokedex.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["endpoint","data","requestOptions","method","headers","body","JSON","stringify","fetch","this","baseUrl","mode","redirect","PokeApi","pokemonName","get","toLowerCase","res","status","json","Api","slugToText","slug","str","replace","charAt","toUpperCase","substring","Pokedex","props","state","online","pokemonId","pokemon","pokemonImage","description","_onPokemonNameChange","debounce","onPokemonNameChanged","onPowerButtonClicked","bind","onPokemonNameChange","e","setState","Array","console","log","push","types","forEach","pokeType","type","name","pop","stats","stat","base_stat","moves","move","join","a","length","getPokemon","id","sprites","front_default","buildPokemonDescription","target","value","className","onClick","placeholder","onInput","spellCheck","src","alt","dangerouslySetInnerHTML","__html","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dfb2b16.chunk.js","sourcesContent":["export default class {\r\n\r\n\tstatic baseUrl: string;\r\n\r\n\tstatic async post(endpoint: string, data: any) {\r\n\r\n\t\tconst requestOptions = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tbody: JSON.stringify(data)\r\n\t\t};\r\n\r\n\t\treturn await fetch(`${this.baseUrl}${endpoint}`, requestOptions);\r\n\t}\r\n\r\n\tstatic async get(endpoint: string) {\r\n\r\n\t\tconst requestOptions: RequestInit = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\tmode: \"cors\",\r\n\t\t\tredirect: \"follow\"\r\n\t\t};\r\n\r\n\t\treturn await fetch(`${this.baseUrl}${endpoint}`, requestOptions);\r\n\t}\r\n\r\n}","import Api from './api';\r\n\r\nexport default class PokeApi extends Api {\r\n\r\n\tstatic baseUrl = \"https://pokeapi.co/api/v2/\";\r\n\r\n\tstatic async getPokemon(pokemonName: string) {\r\n\t\t\r\n\t\tlet res = await this.get(`pokemon/${pokemonName.toLowerCase()}`);\r\n\t\r\n\t\tif (res.status != 200)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\treturn await res.json();\r\n\r\n\t}\r\n\r\n}","export function stringToTitle(str: string) {\r\n\treturn str.charAt(0).toUpperCase() + str.substring(1);\r\n}\r\n\r\nexport function slugToText(slug: string) {\r\n\treturn stringToTitle(slug.replace(\"-\", \" \"));\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Pokedex.css';\r\nimport { debounce } from 'lodash';\r\nimport PokeApi from '../../services/pokeapi';\r\nimport { slugToText, stringToTitle } from '../../utils';\r\n\r\ninterface Props {\r\n\t\r\n}\r\ninterface State {\r\n\tonline: boolean;\r\n\tpokemonId: number;\r\n\tpokemon: string;\r\n\tpokemonImage: string,\r\n\tdescription: string;\r\n}\r\n\r\ninterface Pokemon {\r\n\tid: number,\r\n\tname: string,\r\n\tsprites: any,\r\n\tstats: any,\r\n\ttypes: any,\r\n\tmoves: any\r\n}\r\n\r\nexport default class Pokedex extends Component<Props, State> {\r\n\tstate = {\r\n\t\tonline: false,\r\n\t\tpokemonId: 0,\r\n\t\tpokemon: \"\",\r\n\t\tpokemonImage: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png\",\r\n\t\tdescription: \"\"\r\n\t}\r\n\r\n\t_onPokemonNameChange = debounce(this.onPokemonNameChanged, 1000);\r\n\r\n\tconstructor(props: Props, state: State) {\r\n\t\tsuper(props, state);\r\n\r\n\t\tthis.onPowerButtonClicked = this.onPowerButtonClicked.bind(this);\r\n\t\tthis.onPokemonNameChange = this.onPokemonNameChange.bind(this);\r\n\t\tthis.onPokemonNameChanged = this.onPokemonNameChanged.bind(this);\r\n\t}\r\n\r\n\tonPowerButtonClicked(e: any) {\r\n\t\tthis.setState({online: !this.state.online});\r\n\t}\r\n\r\n\tbuildPokemonDescription(pokemon: Pokemon) : string{\r\n\t\tlet description: string[] = new Array();\r\n\r\n\t\tconsole.log({pokemon});\r\n\r\n\t\tdescription.push(\"<b>Type:</b> \");\r\n\t\tpokemon.types.forEach((pokeType: any) => {\r\n\t\t\tdescription.push(pokeType.type.name);\r\n\t\t\tdescription.push(\"/\");\r\n\t\t});\r\n\t\tdescription.pop();\r\n\t\tdescription.push(\"\\n\\n\");\r\n\r\n\t\tpokemon.stats.forEach((stat: any) => {\r\n\t\t\tdescription.push(\"<b>\");\r\n\t\t\tdescription.push(slugToText(stat.stat.name));\r\n\t\t\tdescription.push(\"</b>\");\r\n\t\t\tdescription.push(\": \" + stat.base_stat);\r\n\t\t\tdescription.push(\"\\n\");\r\n\t\t});\r\n\r\n\t\tdescription.push(\"\\n\\n\");\r\n\r\n\t\tdescription.push(\"<b>Possible moves:</b>\\n\");\r\n\t\tpokemon.moves.forEach((move: any) => {\r\n\r\n\t\t\tdescription.push( slugToText(move.move.name) )\r\n\t\t\tdescription.push(\"\\n\")\r\n\r\n\t\t});\r\n\t\tdescription.pop();\r\n\r\n\t\treturn description.join(\"\");\r\n\t}\r\n\r\n\tasync onPokemonNameChanged() {\r\n\r\n\t\tif (this.state.pokemon.length < 2)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tlet pokemon = await PokeApi.getPokemon(this.state.pokemon);\r\n\r\n\t\tif (pokemon == null)\r\n\t\t\treturn;\r\n\r\n\t\tthis.setState({\r\n\t\t\tpokemonId: pokemon.id,\r\n\t\t\tpokemonImage: pokemon.sprites.front_default,\r\n\t\t\tdescription: this.buildPokemonDescription(pokemon)\r\n\t\t})\r\n\t}\r\n\r\n\tonPokemonNameChange(e: any) {\r\n\t\tthis.setState({pokemon: e.target.value});\r\n\t\tthis._onPokemonNameChange();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"pokedex\">\r\n\t\t\t\t\t<div className={ \"pokedex-power-button \" + (this.state.online ? \"pokedex-power-button-on\" : \"\") } onClick={this.onPowerButtonClicked}></div>\r\n\t\t\t\t\t<div className={ \"pokedex-display \" + (this.state.online ? \"pokedex-display-on\" : \"\") }>\r\n\r\n\t\t\t\t\t\t{this.state.online && <>\r\n\t\t\t\t\t\t\t<div className=\"pokedex-display-header\">\r\n\t\t\t\t\t\t\t\t<div className=\"InputAddOn\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"pokedex-display-title-id InputAddOn-item\">#{this.state.pokemonId}</span>\r\n\t\t\t\t\t\t\t\t\t<input placeholder=\"Put the pokemon name here\" className=\"pokedex-display-title InputAddOn-field\" onInput={this.onPokemonNameChange} spellCheck=\"false\" value={this.state.pokemon}></input>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<img className=\"pokedex-display-image\" src={this.state.pokemonImage} alt=\"Pokemon representation\"></img>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"pokedex-display-content\">\r\n\t\t\t\t\t\t\t\t<p dangerouslySetInnerHTML={ {__html: this.state.description} }></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>}\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Pokedex from './components/Pokedex/Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex></Pokedex>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}